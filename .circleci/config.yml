#
#  Globality autogenerated CircleCI configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.9.1
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"


deploy_defaults: &deploy_defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:stable
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"
whitelist: &whitelist
  paths:
    .

version: 2

jobs:
  checkout:
    <<: *defaults

    steps:
      - checkout

      - run:
          name: Authenticate NPM
          command: |
            touch .npmrc
            curl -u$JFROG_AUTH https://globality.jfrog.io/globality/api/npm/auth > .npmrc
            echo "registry=https://globality.jfrog.io/globality/api/npm/npm" >> .npmrc

      - restore_cache:
          keys:

            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Install Dependencies
          command: |
            if [ "${CIRCLE_BRANCH/#feature/}" != "${CIRCLE_BRANCH}" ] || [ "${CIRCLE_BRANCH}" == "develop" ]; then echo "" > yarn.lock; fi
            yarn install --pure-lockfile

      - save_cache:
          paths:
            - node_modules

          key: v1-dependencies-{{ checksum "yarn.lock" }}

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist


  build:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker

      - run:
          name: Build code
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ]; then yarn build:dev; fi
            if [ "$CIRCLE_BRANCH" != "${CIRCLE_BRANCH/bugfix/}" ]; then yarn build:dev; fi
            if [ "$CIRCLE_BRANCH" != "${CIRCLE_BRANCH/feature/}" ]; then yarn build:dev; fi
            if [ "$CIRCLE_BRANCH" != "${CIRCLE_BRANCH/release/}" ]; then yarn build:test; fi
            if [ "$CIRCLE_BRANCH" != "${CIRCLE_BRANCH/hotfix/}" ]; then yarn build:staging; fi
            if [ "$CIRCLE_BRANCH" == "master" ]; then yarn build:staging; fi
            if [ -n "$CIRCLE_TAG" ]; then yarn build:staging; fi

      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist

  test:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Test code
          command: yarn test

  lint:
    <<: *defaults

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Lint code
          command: yarn lint

  deploy_dev:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            eval $(aws ecr get-login --no-include-email)
            mv Dockerfile.template Dockerfile
            docker build -t ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} .
            docker push ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} ${AWS_ECR_DOMAIN}/truman:develop
            docker push ${AWS_ECR_DOMAIN}/truman:develop
            python -m middlefield globality build deploy \
                --service truman \
                --environment dev \
                --sha ${CIRCLE_SHA1} \
                --cluster "$(http -b http://color.dev.globality.io/newfrontend)"


  deploy_test:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            eval $(aws ecr get-login --no-include-email)
            mv Dockerfile.template Dockerfile
            docker build -t ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} .
            docker push ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} ${AWS_ECR_DOMAIN}/truman:${CIRCLE_BRANCH//\//-}
            docker push ${AWS_ECR_DOMAIN}/truman:${CIRCLE_BRANCH//\//-}
            python -m middlefield globality build deploy \
                --service truman \
                --environment test \
                --sha ${CIRCLE_SHA1} \
                --cluster "$(http -b http://color.test.globality.io/newfrontend)"

  deploy_staging:
    <<: *deploy_defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker
      - run:
          name: Deploy
          command: |
            eval $(aws ecr get-login --no-include-email)
            mv Dockerfile.template Dockerfile
            docker build -t ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} .
            docker push ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1}
            docker tag ${AWS_ECR_DOMAIN}/truman:${CIRCLE_SHA1} ${AWS_ECR_DOMAIN}/truman:${CIRCLE_TAG}
            docker push ${AWS_ECR_DOMAIN}/truman:${CIRCLE_TAG}
            python -m middlefield globality build deploy \
                --service truman \
                --environment staging \
                --sha ${CIRCLE_SHA1} \
                --cluster "$(http -b http://color.staging.globality.io/newfrontend)"


workflows:
  version: 2

  build-and-release:
    jobs:
      - checkout:
          filters:
            # run for all branches (implicit) and tags (must be specified)
            tags:
              only: /.*/
      - test:
          filters:
            # run for all branches (implicit) and tags (must be specified)
            tags:
              only: /.*/
          requires:
            - checkout
      - lint:
          filters:
            # run for all branches (implicit) and tags (must be specified)
            tags:
              only: /.*/
          requires:
            - checkout
      - build:
          filters:
            # run for all branches (implicit) and tags (must be specified)
            tags:
              only: /.*/
          requires:
            - test
            - lint
      - deploy_dev:
          requires:
            - build
          filters:
            branches:
              only: develop

      - deploy_test:
          requires:
            - build
          filters:
            branches:
              only: /release\/2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/
      - deploy_staging:
          requires:
            - build
          filters:
            tags:
              only: /2[0-9]{3}\.[0-5]?[0-9]\.[0-9]{1,3}$/
            branches:
              ignore: /.*/
